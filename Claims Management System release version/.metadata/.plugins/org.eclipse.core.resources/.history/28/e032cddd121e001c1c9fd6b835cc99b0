package com.cognizant.claimmicroservice.controller;

import org.hibernate.internal.build.AllowSysOut;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.cognizant.claimmicroservice.client.AuthClient;
import com.cognizant.claimmicroservice.dto.ClaimStatusDTO;
import com.cognizant.claimmicroservice.exception.AuthorizationException;
import com.cognizant.claimmicroservice.exception.BenefitsNotFoundException;
import com.cognizant.claimmicroservice.exception.ClaimNotFoundException;
import com.cognizant.claimmicroservice.exception.ProviderNotFoundException;
import com.cognizant.claimmicroservice.model.Claim;
import com.cognizant.claimmicroservice.service.ClaimService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;

/*
 * operations related to submitting claim and getting the claim status
 * 
 */
@Slf4j
@Api(value = "Claims Controller", description = "operations related to submitting claim and getting the claim status")
@RestController
public class ClaimsController {

	@Autowired
	private ClaimService claimserviceImpl;

	@Autowired
	private AuthClient authClient;

	@Autowired
	private Claim claimsStatusDto;




	/*
	 * this method invokes authorizationMicroservice to check the validity of token first 
	 * then invokes the claimServiceImpl which invokes the claimRepository and get status of the claim
	 * 
	 * @param claimId-claim id
	 * @param policyId- id of the policy subscribed by the member
	 * @param memberId- member id of the user
	 * @requestHeader token- token passed from member microservice
	 * 
	 * @return ResponseEntity of ClaimStatusDTO type 
	 * Or 
	 * throw authorization exception
	 */
	@ApiOperation(value = "Get Claim Status")
	@RequestMapping(value = "/getClaimStatus/{claimId}/{policyId}/{memberId}", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<Claim> getClaimStatus(@RequestHeader(value = "Authorization") String token,@PathVariable int claimId, @PathVariable int policyId,
			@PathVariable int memberId) throws ProviderNotFoundException, ClaimNotFoundException {
		log.info("getClaimStatus started");
		if (authClient.getValidity(token)) {
			log.info("token validated");
			System.out.println(claimserviceImpl.getClaimStatus(claimId, policyId, memberId).toString());
			log.info("getClaimStatus ended");
			return new ResponseEntity<Claim>(claimserviceImpl.getClaimStatus(claimId, policyId, memberId),
					HttpStatus.OK);
		}
		else {
			throw new AuthorizationException("Token is either expired or invalid...");
		}
	}
	
	/*
	 * this method invokes authorizationMicroservice to check the validity of token first 
	 * then invokes the claimServiceImpl which invokes policyMicroservice 
	 * to get List of provider , benefits and get the claim amount.
	 * 
	 * @param claimId-claim id
	 * @param policyId- id of the policy subscribed by the member
	 * @param memberId- member id of the user
	 * @param providerId- provider id of a provider
	 * @param benefitId- benefit id which user is availing claim for
	 * @param totalAmount-total amount given in the health-care bill
	 * @param claimAmount- the amount which user wants to claim
	 * 
	 * @return  ResponseEntity of type ClaimStatusDTO(claim status and its description)
	 * or if token is not valid
	 * @return  ResponseEntity of type String(message) and status forbidden
	 */
	@ApiOperation(value = "Submit Claim")
	@PostMapping(value = "/submitClaim/{claimId}/{policyId}/{memberId}/{providerId}/{benefitId}/{totalAmount}/{claimedAmount}", produces = "application/json")
	public ResponseEntity<?> submitClaim(@PathVariable int claimId,@PathVariable int policyId,
			@PathVariable int memberId, @PathVariable int providerId, @PathVariable int benefitId,
			@PathVariable double totalAmount, @PathVariable double claimedAmount,
			@RequestHeader(value = "Authorization", required = false) String token) throws ProviderNotFoundException, BenefitsNotFoundException {
		log.info("submitclaim started");
		if (authClient.getValidity(token))
		{
			claimsStatusDto = claimserviceImpl.processSubmitClaim(claimId,policyId,memberId, providerId, benefitId, totalAmount,claimedAmount,token);

		log.debug("claimsDTO={}", claimsStatusDto);
		log.info("submitclaim ended");
		return new ResponseEntity<>(claimsStatusDto, HttpStatus.OK);
		}
		else {
			throw new AuthorizationException("Token is either expired or invalid...");
			
		}	
	}

}
